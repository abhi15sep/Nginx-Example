1. https://www.nginx.com/resources/glossary/nginx/
2. https://en.wikipedia.org/wiki/C10k_problem
3. https://trends.google.com/trends/explore?date=all&q=nginx
4. https://panic.com/transmit/
5. https://cyberduck.io/
6. https://filezilla-project.org/
7. https://fedoraproject.org/wiki/EPEL
8. http://nginx.org/en/docs/configure.html
9. https://www.freedesktop.org/wiki/Software/systemd/
10. https://www.nginx.com/resources/wiki/start/topics/examples/initscripts/
11. https://www.nginx.com/resources/wiki/start/topics/examples/systemd/
12. http://nginx.org/en/docs/windows.html
13. To install and launch Nginx on startup, we use:
    brew install nginx
    sudo brew services start nginx
14. Install nginx in ubuntu from source
    wget http://nginx.org/download/nginx-1.16.1.tar.gz
    tar -zxvf nginx-1.16.1.tar.gz
    cd nginx-1.16.1
    apt-get install build-essential
    ./configure
    apt-get install libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev
    ./configure
    http://nginx.org/en/docs/configure.html
    ./configure --sbin-path=/usr/bin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-pcre --pid-path=/var/run/nginx.pid --with-http_ssl_module
    make
    make install
    Save this file as /lib/systemd/system/nginx.service
    Add this content
    [Unit]
Description=The NGINX HTTP and reverse proxy server
After=syslog.target network.target remote-fs.target nss-lookup.target

[Service]
Type=forking
PIDFile=/run/nginx.pid
ExecStartPre=/usr/sbin/nginx -t
ExecStart=/usr/sbin/nginx
ExecReload=/usr/sbin/nginx -s reload
ExecStop=/bin/kill -s QUIT $MAINPID
PrivateTmp=true

[Install]
WantedBy=multi-user.target

Then to test: systemctl start nginx

15. To test nginx configuration
nginx -t

16. Regex match is having more preference then prefix match.
    Nginx order of priority is:
    1. Exact match: = Uri
    2. Preferential Prefix match:  ^~ Uri
    3. Regex match: ~* Uri
    4. Prefix match: Uri

17. Nginx Docs: Variables
http://nginx.org/en/docs/varindex.html
Article: If Is Evil: https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/

18. HTTP status code reference
https://developer.mozilla.org/en-US/docs/Web/HTTP/Status

19. Rewrite and Redirect
rewrite pattern Uri
return status Uri

20. try_files
Ex: It can be used in server context or location context.
server {
    try_files path1 path2 final

    location / {
        try_files path1 path2 final;
    }
}
It allows nginx to have check for a resource (path1), to respond with in any number of locations
 relative to root directive, with final argument that results in rewrite and re-evaluation.
 So only last argument works as rewrite and will use location directive, but all path before last 
  will check relative location to root. i.e rootpath/path1

  Named locations @ also can be used with try_files and it saves rewrite. 


21. Error Log: http://nginx.org/en/docs/ngx_core_module.html#error_log
Access Log: http://nginx.org/en/docs/http/ngx_http_log_module.html
Configuring Logging: https://docs.nginx.com/nginx/admin-guide/monitoring/logging/

22. Inheritance and directive types
server {
    root /site/demo;

    location {
        #Inherited root
        root /site/demo;
    }
}
Three main directive types are:
A) Standard directive
B) Array directive
C) Action directive

23. Understanding and Implementing FastCGI Proxying in Nginx
https://www.digitalocean.com/community/tutorials/understanding-and-implementing-fastcgi-proxying-in-nginx

24. Worker Processes
To Find number of core : worker_processes
lscpu
nproc
To find limit of open files (No. of connections each process worker can accept) worker_connections.
There is a limit how many files can be opened for each CPU core.
ulimit -n
worker_processes * worker_connections = Max connections
To change pid location in nginx.conf:
pid /var/run/new_nginx.pid

25. Buffer and timeouts
Configuration file measurement units: http://nginx.org/en/docs/syntax.html
What is Buffering ?
When a process or a nginx worker reads data into memory before writing it to its next destination. 

26. Adding dynamic module 
http://nginx.org/en/docs/http/ngx_http_image_filter_module.html
Command to check nginx current configuration :
nginx -V 
To See list of module available in current nginx source file directory
./configure --help (lists all modules & flags available to configure)
And to see dynamic module use Command
./configure --help | grep dynamic
To add new dynamic module:
./configure --sbin-path=/usr/bin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-pcre --pid-path=/var/run/nginx.pid --with-http_ssl_module --with-http_image_filter_module=dynamic --modules-path=/etc/nginx/modules
apt-get install libgd-dev
make
make install
nginx -V
nginx -t
systemctl reload nginx
systemctl status nginx

27. Headers & Expires
It tells browser to cache image or css files , so that more requests to server can be avoided.

28. Compressed responses with gzip
Module ngx_http_gzip_module : http://nginx.org/en/docs/http/ngx_http_gzip_module.html
Curl -I http://167.99.97.26/styles.css
Curl -I -H "Accept-Encoding: gzip, dflate" http://167.99.97.26/styles.css
Curl -H "Accept-Encoding: gzip, dflate" http://167.99.97.26/styles.css > styles.min.css

29.FastCGI cache (micro cache)
Module ngx_http_fastcgi_module: http://nginx.org/en/docs/http/ngx_http_fastcgi_module.html
Apache Bench: https://httpd.apache.org/docs/2.4/programs/ab.html
To install Apache bench: apt-get install apache2-utils  , to access: ab
ab -n 100 -c 10 http://167.99.94.27, here n is numer of request and c is concurrent connections. 
fastcgi_cache_path - filesystem location to store cache.
$upstream_cache_status - can be added in response Headers to know about cache hit/miss.

30. HTTP2:
How To Create a Self-Signed SSL Certificate for Nginx in Ubuntu 16.04:
https://www.digitalocean.com/community/tutorials/how-to-create-a-self-signed-ssl-certificate-for-nginx-in-ubuntu-16-04
benefits of nginx HTTP2 module:
A) HTTP2 follows binary protocol.
B) Compressed Headers
C) Uses persistent connections.
D) Multiplex streaming
E) Server Push

To enable http2 module:
a. nginx -V 
b. ./configure --help | grep http_v2
c. ./configure --sbin-path=/usr/bin/nginx --conf-path=/etc/nginx/nginx.conf --error-log-path=/var/log/nginx/error.log --http-log-path=/var/log/nginx/access.log --with-pcre --pid-path=/var/run/nginx.pid --with-http_ssl_module --with-http_image_filter_module=dynamic --modules-path=/etc/nginx/modules --with-http_v2_module
d. make
e. make install
f. nginx -t
g. systemctl restart nginx
h. systemctl status nginx

To generate openssl certificate:
openssl req -x509 -days 10 -nodes -newkey rsa:2048 -keyout /etc/nginx/ssl/self.key -out /etc/nginx/ssl/self.crt

32. Server Push
Nghttp2: HTTP/2 C: https://nghttp2.org/
apt-get install nghttp2-client
Use: nghttp -nys https://167.99.93.27/index.html
     nghttp -nysa https://167.99.93.27/index.html
HTTP/2 Server Push with NGINX 1.13.9: https://www.nginx.com/blog/nginx-1-13-9-http2-server-push/

33. HTTPS (SSL)
Diffieâ€“Hellman key exchange: https://en.wikipedia.org/wiki/Diffie%E2%80%93Hellman_key_exchange
Algorithms Explained: Diffie-Hellman: https://hackernoon.com/algorithms-explained-diffie-hellman-1034210d5100
Curl -Ik http://167.99.97.26, here k is to allow self signed certificates.
How to generate DH parameters:
openssl dhparam 2048 -out /etc/nginx/ssl/dhparam.pem  (Note: here size must be same as private key)

34. Rate Limiting
Load testing tool: https://www.joedog.org/siege-home/
NGINX rate-limiting in a nutshell: https://www.freecodecamp.org/news/nginx-rate-limiting-in-a-nutshell-128fe9e0126c/
Rate Limiting Nginx: https://www.nginx.com/blog/rate-limiting-nginx/
apt-get install siege
siege -v -r 2 -c 5 https://192.62.76.21/thumb.png

35. Basic Auth
apt-get install apache2-utils
htpasswd -c /etc/nginx/.htpasswd user1

36. Hardening Nginx
./configure --help | grep without

37. Lets encrypt - SSL certificate
https://letsencrypt.org/
https://certbot.eff.org/
Lets encrypt 90 days lifetime: https://letsencrypt.org/2015/11/09/why-90-days.html
certbot Docs: https://certbot.eff.org/docs/
To install and configure certificate:
certbot --help
certbot --nginx
To renew certificate:
certbot renew
To test force renewal: certbot renew --dry-run
Certificate renewal can be done using cronttab:
crontab -e
@daily certbot renew
crontab -l : To list all crontab

===========================================================
Reverse Proxy and Load balancing
===========================================================
38. Pre-requsite:
List of static commandline servers: https://www.php.net/manual/en/features.commandline.webserver.php
List of webserver: https://gist.github.com/willurd/5720255
We can run nginx with different nginx.conf file at different location:
nginx -c <nginx.conf file location>

39. Reverse Proxy
Nginx reverse proxy guide:
https://docs.nginx.com/nginx/admin-guide/web-server/reverse-proxy/
ngx_http_proxy_module:
http://nginx.org/en/docs/http/ngx_http_proxy_module.html
To Pass header to clients & Backend:
Add under location: add_header proxied nginx; (To send header to browser)
                    proxy_set_header X-Real-IP $remote_addr; (To send this heaser to backend)

40. Load Balancer:
Using nginx as HTTP load balancer: http://nginx.org/en/docs/http/load_balancing.html
Nginx LoadBalancing Guide: https://docs.nginx.com/nginx/admin-guide/load-balancer/http-load-balancer/
ngx_http_upstream_module: http://nginx.org/en/docs/http/ngx_http_upstream_module.html

http {

    upstream php_servers {
        server localhost:10001;
        server localhost:10002;
        server localhost:10003;
    }

    server {
        listen 8888;

        location / {
            proxy_pass  'http://php_servers';
        }
    }
}

41. LoadBalancing options:
Sticky Sessions (Ip hash):
http {

    upstream php_servers {
        ip_hash;
        server localhost:10001;
        server localhost:10002;
        server localhost:10003;
    }

    server {
        listen 8888;

        location / {
            proxy_pass  'http://php_servers';
        }
    }
}

> LoadBalancing to servers based on least number of connections:
http {

    upstream php_servers {
        least_conn;
        server localhost:10001;
        server localhost:10002;
        server localhost:10003;
    }

    server {
        listen 8888;

        location / {
            proxy_pass  'http://php_servers';
        }
    }
}
Then reload configuration: nginx -s reload

42. Documentation & Resources:
Nginx Documentation: http://nginx.org/en/docs/
Common Pitfalls: https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
Digitalocean Tutorial: https://www.digitalocean.com/community/search?q=nginx
WordPress Nginx: https://wordpress.org/support/article/nginx/
Nginx Resoource: https://github.com/fcambus/nginx-resources

========================================================
Archive
========================================================

43. Adding an nginx init Service:
Nginx Ubuntu init script: https://github.com/JasonGiedymin/nginx-init-ubuntu
Nginx init Scripts: https://www.nginx.com/resources/wiki/start/topics/examples/initscripts/
cd /etc/init.d/
wget https://github.com/JasonGiedymin/nginx-init-ubuntu/blob/master/nginx
sudo chmod +x nginx
update-rc.d -f nginx defaults
echo "NGINX_CONF_FILE=/etc/nginx/nginx.conf" > /etc/default/nginx
echo "DAEMON=/usr/bin/nginx" >> /etc/default/nginx
service nginx status
service nginx start

44. GeoIp
GeoIp download: https://dev.maxmind.com/geoip/geoip2/geolite2/
Nginx GeoIp modue: http://nginx.org/en/docs/http/ngx_http_geoip_module.html
--with-http_geoip_module 
apt-get install libgeoip-dev
make
make install
nginx -V
service nginx reload
We need to download GeoIp database:
mkdir /etc/nginx/geoip
cd /etc/nginx/geoip
wget https://geolite.maxmind.com/download/geoip/database/GeoLite2-City.tar.gz
wget https://geolite.maxmind.com/download/geoip/database/GeoLite2-Country.tar.gz
gunzip GeoLite2-City.tar.gz
gunzip GeoLite2-Country.tar.gz
In Nginx:

http {

    #GeoIp
    geoip_country /etc/nginx/geoip;
    geoip_city /etc/nginx/geoip/GeoLite2-Country.dat;

    server {
        listen 80;

        location / {
            proxy_pass  'http://193.45.55.44/';
        }

        location /geo_country {
            return 200 "$geoip_country_name";
        }

        location /geo_city {
            return 200 "$geoip_city";
        }
    }
}

nginx -t
service nginx reload

45. Video streaming
http://nginx.org/en/docs/http/ngx_http_mp4_module.html
--with-http_mp4_module
In Nginx:
http {

    server {
        listen 80;

        location / {
            proxy_pass  'http://193.45.55.44/';
        }

        location ~ \.mp4$ {
            root /sites/downloads/;
            mp4;
            mp4_buffer_size 4M;
            mp4_max_buffer_size 10M;
        }
    }
}
service nginx reload